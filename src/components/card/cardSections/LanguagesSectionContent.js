'use client';

import React, { useState, useEffect } from 'react';
import LanguageSelector from '../../shared/LanguageSelector';

// Mapping from common language codes to emoji flags
// This should match the mapping in LanguageSelector.js
const langToCountry = {
  en: 'ðŸ‡¬ðŸ‡§', // English -> Great Britain flag
  nl: 'ðŸ‡³ðŸ‡±', // Dutch -> Netherlands flag
  de: 'ðŸ‡©ðŸ‡ª', // German -> Germany flag
  fr: 'ðŸ‡«ðŸ‡·', // French -> France flag
  es: 'ðŸ‡ªðŸ‡¸', // Spanish -> Spain flag
  it: 'ðŸ‡®ðŸ‡¹', // Italian -> Italy flag
  pt: 'ðŸ‡µðŸ‡¹', // Portuguese -> Portugal flag
  ja: 'ðŸ‡¯ðŸ‡µ', // Japanese -> Japan flag
  zh: 'ðŸ‡¨ðŸ‡³', // Chinese -> China flag
  ru: 'ðŸ‡·ðŸ‡º', // Russian -> Russia flag
  ar: 'ðŸ‡¸ðŸ‡¦', // Arabic -> Saudi Arabia flag
  hi: 'ðŸ‡®ðŸ‡³', // Hindi -> India flag
  ko: 'ðŸ‡°ðŸ‡·', // Korean -> South Korea flag
  tr: 'ðŸ‡¹ðŸ‡·', // Turkish -> Turkey flag
  sv: 'ðŸ‡¸ðŸ‡ª', // Swedish -> Sweden flag
  no: 'ðŸ‡³ðŸ‡´', // Norwegian -> Norway flag
  da: 'ðŸ‡©ðŸ‡°', // Danish -> Denmark flag
  fi: 'ðŸ‡«ðŸ‡®', // Finnish -> Finland flag
  pl: 'ðŸ‡µðŸ‡±', // Polish -> Poland flag
  cs: 'ðŸ‡¨ðŸ‡¿', // Czech -> Czech Republic flag
  sk: 'ðŸ‡¸ðŸ‡°', // Slovak -> Slovakia flag
  hu: 'ðŸ‡­ðŸ‡º', // Hungarian -> Hungary flag
  ro: 'ðŸ‡·ðŸ‡´', // Romanian -> Romania flag
  bg: 'ðŸ‡§ðŸ‡¬', // Bulgarian -> Bulgaria flag
  hr: 'ðŸ‡­ðŸ‡·', // Croatian -> Croatia flag
  sl: 'ðŸ‡¸ðŸ‡®', // Slovenian -> Slovenia flag
  et: 'ðŸ‡ªðŸ‡ª', // Estonian -> Estonia flag
  lv: 'ðŸ‡±ðŸ‡»', // Latvian -> Latvia flag
  lt: 'ðŸ‡±ðŸ‡¹', // Lithuanian -> Lithuania flag
  el: 'ðŸ‡¬ðŸ‡·', // Greek -> Greece flag
  he: 'ðŸ‡®ðŸ‡±', // Hebrew -> Israel flag
  th: 'ðŸ‡¹ðŸ‡­', // Thai -> Thailand flag
  vi: 'ðŸ‡»ðŸ‡³', // Vietnamese -> Vietnam flag
  id: 'ðŸ‡®ðŸ‡©', // Indonesian -> Indonesia flag
  ms: 'ðŸ‡²ðŸ‡¾', // Malay -> Malaysia flag
  tl: 'ðŸ‡µðŸ‡­', // Filipino -> Philippines flag
  uk: 'ðŸ‡ºðŸ‡¦', // Ukrainian -> Ukraine flag
  be: 'ðŸ‡§ðŸ‡¾', // Belarusian -> Belarus flag
  ka: 'ðŸ‡¬ðŸ‡ª', // Georgian -> Georgia flag
  am: 'ðŸ‡ªðŸ‡¹', // Amharic -> Ethiopia flag
  sw: 'ðŸ‡°ðŸ‡ª', // Swahili -> Kenya flag
  af: 'ðŸ‡¿ðŸ‡¦', // Afrikaans -> South Africa flag
  ca: 'ðŸ‡ªðŸ‡¸', // Catalan -> Spain flag (region)
  eu: 'ðŸ‡ªðŸ‡¸', // Basque -> Spain flag (region)
  gl: 'ðŸ‡ªðŸ‡¸', // Galician -> Spain flag (region)
  cy: 'ðŸ‡¬ðŸ‡§', // Welsh -> Great Britain flag
  ga: 'ðŸ‡®ðŸ‡ª', // Irish -> Ireland flag
  mt: 'ðŸ‡²ðŸ‡¹', // Maltese -> Malta flag
  is: 'ðŸ‡®ðŸ‡¸', // Icelandic -> Iceland flag
  fo: 'ðŸ‡«ðŸ‡´', // Faroese -> Faroe Islands flag
  sq: 'ðŸ‡¦ðŸ‡±', // Albanian -> Albania flag
  mk: 'ðŸ‡²ðŸ‡°', // Macedonian -> North Macedonia flag
  sr: 'ðŸ‡·ðŸ‡¸', // Serbian -> Serbia flag
  bs: 'ðŸ‡§ðŸ‡¦', // Bosnian -> Bosnia and Herzegovina flag
  me: 'ðŸ‡²ðŸ‡ª', // Montenegrin -> Montenegro flag
  kk: 'ðŸ‡°ðŸ‡¿', // Kazakh -> Kazakhstan flag
  ky: 'ðŸ‡°ðŸ‡¬', // Kyrgyz -> Kyrgyzstan flag
  uz: 'ðŸ‡ºðŸ‡¿', // Uzbek -> Uzbekistan flag
  mn: 'ðŸ‡²ðŸ‡³', // Mongolian -> Mongolia flag
  ne: 'ðŸ‡³ðŸ‡µ', // Nepali -> Nepal flag
  si: 'ðŸ‡±ðŸ‡°', // Sinhala -> Sri Lanka flag
  ta: 'ðŸ‡±ðŸ‡°', // Tamil -> Sri Lanka flag (could also be IN)
  te: 'ðŸ‡®ðŸ‡³', // Telugu -> India flag
  kn: 'ðŸ‡®ðŸ‡³', // Kannada -> India flag
  ml: 'ðŸ‡®ðŸ‡³', // Malayalam -> India flag
  gu: 'ðŸ‡®ðŸ‡³', // Gujarati -> India flag
  pa: 'ðŸ‡®ðŸ‡³', // Punjabi -> India flag
  or: 'ðŸ‡®ðŸ‡³', // Odia -> India flag
  as: 'ðŸ‡®ðŸ‡³', // Assamese -> India flag
  bn: 'ðŸ‡§ðŸ‡©', // Bengali -> Bangladesh flag
  ur: 'ðŸ‡µðŸ‡°', // Urdu -> Pakistan flag
  fa: 'ðŸ‡®ðŸ‡·', // Persian -> Iran flag
  ps: 'ðŸ‡¦ðŸ‡«', // Pashto -> Afghanistan flag
  my: 'ðŸ‡²ðŸ‡²', // Burmese -> Myanmar flag
  km: 'ðŸ‡°ðŸ‡­', // Khmer -> Cambodia flag
  lo: 'ðŸ‡±ðŸ‡¦', // Lao -> Laos flag
  bo: 'ðŸ‡¨ðŸ‡³', // Tibetan -> China flag (Tibet region)
  dz: 'ðŸ‡§ðŸ‡¹', // Dzongkha -> Bhutan flag
};

export default function LanguagesSectionContent({ profile, styles, isEditing, onSave, onCancel }) {
  const { sectionStyle, sectionTitleStyle, placeholderStyle } = styles || {};
  
  // State to hold the selected languages during editing
  const [currentSelection, setCurrentSelection] = useState([]);

  // Parse initial language codes from profile
  const parseLanguageCodes = (languagesData) => {
    // Handle different data types safely
    if (Array.isArray(languagesData)) {
      return languagesData.filter(lang => lang && typeof lang === 'string');
    }
    
    if (typeof languagesData === 'string' && languagesData.trim()) {
      return languagesData.split(',').map(lang => lang.trim()).filter(lang => lang);
    }
    
    // Handle null, undefined, or other types
    return [];
  };

  const initialLanguageCodes = parseLanguageCodes(profile?.languages);
  
  // Initialize local state when editing starts
  useEffect(() => {
    if (isEditing) {
      setCurrentSelection(initialLanguageCodes);
    }
  }, [isEditing]); // Removed initialLanguageCodes dependency to prevent reset on profile update while editing

  const handleSave = () => {
    if (onSave) {
      onSave(currentSelection); // Pass the array of codes
    }
  };

  // Render editing UI
  if (isEditing) {
    return (
      <div style={sectionStyle}>
        <h3 style={sectionTitleStyle}>Edit Languages</h3>
        <LanguageSelector 
          value={currentSelection}
          onChange={setCurrentSelection} // Update local state
        />
        <div style={{ display: 'flex', justifyContent: 'flex-end', gap: '10px', marginTop: '10px' }}>
          <button 
            onClick={onCancel} 
            style={{ 
              padding: '8px 16px', 
              backgroundColor: '#f3f4f6',
              border: '1px solid #d1d5db',
              borderRadius: '6px',
              fontSize: '14px',
              cursor: 'pointer'
            }}
          >
            Cancel
          </button>
          <button 
            onClick={handleSave} 
            style={{ 
              padding: '8px 16px', 
              backgroundColor: '#10b981', 
              color: 'white', 
              border: 'none', 
              borderRadius: '6px',
              fontSize: '14px',
              cursor: 'pointer'
            }}
          >
            Save Languages
          </button>
        </div>
      </div>
    );
  }

  // Render display UI (flags and/or language codes)
  if (initialLanguageCodes.length > 0) {
    return (
      <div style={sectionStyle} title="Click to edit languages">
        <h3 style={sectionTitleStyle}>Languages</h3>
        <div style={{ display: 'flex', flexWrap: 'wrap', gap: '16px', alignItems: 'center' }}>
          {initialLanguageCodes.map((code) => {
            const flagEmoji = langToCountry[code];
            
            // Always show something for each language code
            return (
              <div key={code} style={{ display: 'flex', alignItems: 'center', gap: '4px' }}>
                {flagEmoji ? (
                  <span 
                    title={`${code} - Language flag`}
                    style={{ 
                      fontSize: '32px', 
                      lineHeight: '1',
                      cursor: 'default'
                    }} 
                  >
                    {flagEmoji}
                  </span>
                ) : (
                  <span 
                    style={{ 
                      fontSize: '12px', 
                      backgroundColor: '#f0f0f0', 
                      padding: '4px 8px', 
                      borderRadius: '4px',
                      border: '1px solid #ddd',
                      fontWeight: '500'
                    }}
                    title={`Language: ${code}`}
                  >
                    {code.toUpperCase()}
                  </span>
                )}
              </div>
            );
          })}
        </div>
      </div>
    );
  } else {
    // Show placeholder if no languages selected
    return (
      <div style={placeholderStyle} title="Click to edit languages">
         <p>Click to select Languages</p> 
      </div>
    );
  }
} 