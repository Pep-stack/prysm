'use client';

import React from 'react';
import Select from 'react-select';
import ISO6391 from 'iso-639-1';

// Mapping from language codes to emoji flags
// Only include languages that have a corresponding flag
const langToCountry = {
  en: 'ðŸ‡¬ðŸ‡§', // English -> Great Britain flag
  nl: 'ðŸ‡³ðŸ‡±', // Dutch -> Netherlands flag
  de: 'ðŸ‡©ðŸ‡ª', // German -> Germany flag
  fr: 'ðŸ‡«ðŸ‡·', // French -> France flag
  es: 'ðŸ‡ªðŸ‡¸', // Spanish -> Spain flag
  it: 'ðŸ‡®ðŸ‡¹', // Italian -> Italy flag
  pt: 'ðŸ‡µðŸ‡¹', // Portuguese -> Portugal flag
  ja: 'ðŸ‡¯ðŸ‡µ', // Japanese -> Japan flag
  zh: 'ðŸ‡¨ðŸ‡³', // Chinese -> China flag
  ru: 'ðŸ‡·ðŸ‡º', // Russian -> Russia flag
  ar: 'ðŸ‡¸ðŸ‡¦', // Arabic -> Saudi Arabia flag
  hi: 'ðŸ‡®ðŸ‡³', // Hindi -> India flag
  ko: 'ðŸ‡°ðŸ‡·', // Korean -> South Korea flag
  tr: 'ðŸ‡¹ðŸ‡·', // Turkish -> Turkey flag
  sv: 'ðŸ‡¸ðŸ‡ª', // Swedish -> Sweden flag
  no: 'ðŸ‡³ðŸ‡´', // Norwegian -> Norway flag
  da: 'ðŸ‡©ðŸ‡°', // Danish -> Denmark flag
  fi: 'ðŸ‡«ðŸ‡®', // Finnish -> Finland flag
  pl: 'ðŸ‡µðŸ‡±', // Polish -> Poland flag
  cs: 'ðŸ‡¨ðŸ‡¿', // Czech -> Czech Republic flag
  sk: 'ðŸ‡¸ðŸ‡°', // Slovak -> Slovakia flag
  hu: 'ðŸ‡­ðŸ‡º', // Hungarian -> Hungary flag
  ro: 'ðŸ‡·ðŸ‡´', // Romanian -> Romania flag
  bg: 'ðŸ‡§ðŸ‡¬', // Bulgarian -> Bulgaria flag
  hr: 'ðŸ‡­ðŸ‡·', // Croatian -> Croatia flag
  sl: 'ðŸ‡¸ðŸ‡®', // Slovenian -> Slovenia flag
  et: 'ðŸ‡ªðŸ‡ª', // Estonian -> Estonia flag
  lv: 'ðŸ‡±ðŸ‡»', // Latvian -> Latvia flag
  lt: 'ðŸ‡±ðŸ‡¹', // Lithuanian -> Lithuania flag
  el: 'ðŸ‡¬ðŸ‡·', // Greek -> Greece flag
  he: 'ðŸ‡®ðŸ‡±', // Hebrew -> Israel flag
  th: 'ðŸ‡¹ðŸ‡­', // Thai -> Thailand flag
  vi: 'ðŸ‡»ðŸ‡³', // Vietnamese -> Vietnam flag
  id: 'ðŸ‡®ðŸ‡©', // Indonesian -> Indonesia flag
  ms: 'ðŸ‡²ðŸ‡¾', // Malay -> Malaysia flag
  tl: 'ðŸ‡µðŸ‡­', // Filipino -> Philippines flag
  uk: 'ðŸ‡ºðŸ‡¦', // Ukrainian -> Ukraine flag
  be: 'ðŸ‡§ðŸ‡¾', // Belarusian -> Belarus flag
  ka: 'ðŸ‡¬ðŸ‡ª', // Georgian -> Georgia flag
  am: 'ðŸ‡ªðŸ‡¹', // Amharic -> Ethiopia flag
  sw: 'ðŸ‡°ðŸ‡ª', // Swahili -> Kenya flag
  af: 'ðŸ‡¿ðŸ‡¦', // Afrikaans -> South Africa flag
  ca: 'ðŸ‡ªðŸ‡¸', // Catalan -> Spain flag (region)
  eu: 'ðŸ‡ªðŸ‡¸', // Basque -> Spain flag (region)
  gl: 'ðŸ‡ªðŸ‡¸', // Galician -> Spain flag (region)
  cy: 'ðŸ‡¬ðŸ‡§', // Welsh -> Great Britain flag
  ga: 'ðŸ‡®ðŸ‡ª', // Irish -> Ireland flag
  mt: 'ðŸ‡²ðŸ‡¹', // Maltese -> Malta flag
  is: 'ðŸ‡®ðŸ‡¸', // Icelandic -> Iceland flag
  fo: 'ðŸ‡«ðŸ‡´', // Faroese -> Faroe Islands flag
  sq: 'ðŸ‡¦ðŸ‡±', // Albanian -> Albania flag
  mk: 'ðŸ‡²ðŸ‡°', // Macedonian -> North Macedonia flag
  sr: 'ðŸ‡·ðŸ‡¸', // Serbian -> Serbia flag
  bs: 'ðŸ‡§ðŸ‡¦', // Bosnian -> Bosnia and Herzegovina flag
  me: 'ðŸ‡²ðŸ‡ª', // Montenegrin -> Montenegro flag
  kk: 'ðŸ‡°ðŸ‡¿', // Kazakh -> Kazakhstan flag
  ky: 'ðŸ‡°ðŸ‡¬', // Kyrgyz -> Kyrgyzstan flag
  uz: 'ðŸ‡ºðŸ‡¿', // Uzbek -> Uzbekistan flag
  mn: 'ðŸ‡²ðŸ‡³', // Mongolian -> Mongolia flag
  ne: 'ðŸ‡³ðŸ‡µ', // Nepali -> Nepal flag
  si: 'ðŸ‡±ðŸ‡°', // Sinhala -> Sri Lanka flag
  ta: 'ðŸ‡±ðŸ‡°', // Tamil -> Sri Lanka flag (could also be IN)
  te: 'ðŸ‡®ðŸ‡³', // Telugu -> India flag
  kn: 'ðŸ‡®ðŸ‡³', // Kannada -> India flag
  ml: 'ðŸ‡®ðŸ‡³', // Malayalam -> India flag
  gu: 'ðŸ‡®ðŸ‡³', // Gujarati -> India flag
  pa: 'ðŸ‡®ðŸ‡³', // Punjabi -> India flag
  or: 'ðŸ‡®ðŸ‡³', // Odia -> India flag
  as: 'ðŸ‡®ðŸ‡³', // Assamese -> India flag
  bn: 'ðŸ‡§ðŸ‡©', // Bengali -> Bangladesh flag
  ur: 'ðŸ‡µðŸ‡°', // Urdu -> Pakistan flag
  fa: 'ðŸ‡®ðŸ‡·', // Persian -> Iran flag
  ps: 'ðŸ‡¦ðŸ‡«', // Pashto -> Afghanistan flag
  my: 'ðŸ‡²ðŸ‡²', // Burmese -> Myanmar flag
  km: 'ðŸ‡°ðŸ‡­', // Khmer -> Cambodia flag
  lo: 'ðŸ‡±ðŸ‡¦', // Lao -> Laos flag
  bo: 'ðŸ‡¨ðŸ‡³', // Tibetan -> China flag (Tibet region)
  dz: 'ðŸ‡§ðŸ‡¹', // Dzongkha -> Bhutan flag
};

// Generate language options only for languages that have flags
const languageOptions = Object.keys(langToCountry)
  .map(code => {
    const flagEmoji = langToCountry[code];
    
    // Only include if flag exists and language name is available
    if (flagEmoji && ISO6391.getName(code)) {
      return {
        value: code,
        label: ISO6391.getName(code),
        flagEmoji: flagEmoji
      };
    }
    return null;
  })
  .filter(option => option !== null)
  .sort((a, b) => a.label.localeCompare(b.label));

export default function LanguageSelector({ value = [], onChange }) {
  // Ensure 'value' is always an array of language codes
  const currentLanguageCodes = Array.isArray(value) ? value : [];

  // Map the codes back to the option objects needed by react-select
  const selectedOptions = currentLanguageCodes
    .map(code => languageOptions.find(option => option.value === code))
    .filter(option => option); // Filter out any undefined results if a code is invalid

  // Handle change from react-select
  const handleChange = (selected) => {
    // Extract just the language codes ('value') from the selected options
    const selectedCodes = selected ? selected.map(option => option.value) : [];
    if (onChange) {
      onChange(selectedCodes); // Pass the array of codes to the parent's onChange
    }
  };

  // Custom option component to show flag + name
  const formatOptionLabel = ({ value, label, flagEmoji }) => {
    return (
      <div style={{ display: 'flex', alignItems: 'center', gap: '8px' }}>
        {flagEmoji && (
          <span style={{ fontSize: '20px', lineHeight: '1' }}>
            {flagEmoji}
          </span>
        )}
        <span>{label}</span>
      </div>
    );
  };

  return (
    <div style={{ marginBottom: '20px' }}>
      <label style={{ display: 'block', marginBottom: '5px', fontWeight: 'normal' }}>
        Select Languages (showing {languageOptions.length} languages with flags):
      </label>
      <Select
        isMulti
        options={languageOptions}
        value={selectedOptions}
        onChange={handleChange}
        formatOptionLabel={formatOptionLabel}
        placeholder="Search and select languages..."
        styles={{
          control: (provided) => ({
            ...provided,
            minHeight: '40px', 
          }),
          multiValue: (provided) => ({
            ...provided,
            backgroundColor: '#e0e0e0', 
          }),
          multiValueLabel: (provided) => ({
            ...provided,
            color: '#333',
          }),
          multiValueRemove: (provided) => ({
            ...provided,
            color: '#555',
            ':hover': {
              backgroundColor: '#c0c0c0',
              color: 'white',
            },
          }),
          option: (provided) => ({
            ...provided,
            padding: '8px 12px',
          }),
        }}
      />
    </div>
  );
} 